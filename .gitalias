[alias]
        a = add -A
        ai = add -i
        ap = add -p
        aN = add -N
        ap-with-patience = -c diff.algorithm=patience add -p

        # Liste les alias git
        alias = !git config -l | grep ^alias | sed 's/alias\\.\\([^=]*\\)=/\\1 = /'
        # What Is : Voir la description d'un alias
        # Usage : git wi l
        wi = !"f() { git config -l | grep ^alias | grep -oP --color=never \"alias\\.$@=\\K(.*)\"; }; f"

        amend = commit --amend
        ane = commit --amend --no-edit

        b = branch
        bm = branch -m
        bd = branch -d
        # Not bD because git aliases are case insensitive.
        bdel = branch -D
        # Grep sur les branches locales
        bg = !"f() { git branch | grep "$@"; }; f"
        # Grep sur toutes les branches
        bga = !"f() { git branch --all | grep "$@"; }; f"
        bvv = branch -vv
        bavv = branch -a -vv

        # Liste numérotée des dernières branches modifiées.
        bh = !"f() { git for-each-ref --format='%(refname:short) %1B[0;33m(%(committerdate:relative))%1B[m' --sort -committerdate refs/heads/ | head -n ${1:-30} | nl -v0; }; f"
        # Liste des 10 dernières branches modifiées pour un remote donné.
        bhr = !"f() { git for-each-ref --format='%(refname:short) %1B[0;33m(%(committerdate:relative))%1B[m' --sort -committerdate | grep --color=never "^$1/" | head -n 10; }; f"
        # Permet de checkout une des branches listées avec `git bh`.
        # Usage : git p-coh 2
        p-coh = !"f() { git checkout $(git bh $(($1+1)) | grep -oP --color=NEVER \"^\\s*$1\\s+\\K([^\\s]+)\"); }; f"
        # `git bh` suivi d'un `git p-coh`.
        bhc = !"f() { git bh $1 && echo '\nEnter index of branch to checkout: ' && read branch_index && git p-coh $branch_index; }; f"

        c = commit
        cf = commit --fixup

        # Permet de fixup un des commits listés avec git lh
        # Usage : git p-cfh 2
        p-cfh = !"f() { git cf $(git lh $(($1+1)) | grep -oP --color=NEVER \"$1\\s+\\K([a-f0-9]+)\\s\"); }; f"

        # Permet de reword un des commits listés avec git lh
        # Usage : git p-crh 2
        p-crh = !"f() { git reword $(git lh $(($1+1)) | grep -oP --color=NEVER \"$1\\s+\\K([a-f0-9]+)\\s\"); }; f"

        # Rebase on a commit listed with `git rbh`.
        # Usage : git p-rbh 2
        p-rbh = !"f() { set -x; git rebase -i $(git lh $(($1+1)) | grep -oP --color=NEVER \"$1\\s+\\K([a-f0-9]+)\\s\"); }; f"
        p-rbhas = !"f() { set -x; git rebase --autosquash -i $(git lh $(($1+1)) | grep -oP --color=NEVER \"$1\\s+\\K([a-f0-9]+)\\s\"); }; f"

        cm = commit -m
        # Temporary commit, can be used instead of stash to keep temporary changes on their branch.
        # `./bash-prompt.sh` will display a purple star when the latest commit is a temporary one.
        # Temporary commits can be undone with `git reset --soft HEAD`.
        tmp = !git commit -m '"[DON’T MERGE] Temporary commit\n\nThis commit has been added with `git ctmp` [0].\n/!\\ It should not be merged until it is cleaned/reworded.\n\n[0]: https://github.com/dorian-marchal/git-config/blob/a30e4474e6bb2f9513700e4276ddc75d4c1c91a3/.gitalias#L51-L54"'
        ctmp = !git add . --all && git tmp

        cl = clone
        # Clone un dépôt Github via le remote SSH
        # Usage : git clgh dorian-marchal/git-config
        clgh = !"f() { git clone "git@github.com:$1.git $2"; }; f"
        cldunno = !"f() { git clone "git@git.dunno.fr:$1.git $2"; }; f"

        co = checkout
        cob = checkout -b
        # Checkout a Github PR.
        # Usage: git copr <remote> <id>
        copr = !"f() { git fetch $1 +refs/pull/$2/head && git checkout FETCH_HEAD; }; f"

        cp = cherry-pick
        cpa = cherry-pick --abort
        # Cherry pick and unstage
        # Usage : git cpn ref
        cpn = !"f() { git cherry-pick -n "$@" && git reset HEAD --; }; f"

        # Dernier tag du type v[0-9]+
        current-release = !git describe --tags --match "v[0-9]*" --abbrev=0

        current-branch = rev-parse --abbrev-ref HEAD
        cb = !git current-branch

        # Vérifie si la branche courante est rebase sur la branche passée en paramètre (sortie 0 = rebased, 1 = not rebased).
        # Attention, cet alias ne fetch pas.
        # Usage : git p-is-rebased <remote> <branch>
        p-is-rebased = !"f() { if [ \"$(git show-ref -s $1/$2)\" = \"$(git merge-base HEAD $1/$2)\" ]; then exit 0; else exit 1; fi; }; f"

        # Vérifie que la branche courante ne comporte pas de commits de fixup (sortie 0 = pas de fixup, 1 = fixups).
        # Attention, cet alias ne fetch pas.
        # Usage : git p-is-fixup-free <remote> <branch>
        p-is-fixup-free = !"f() { if [ -z \"$(git log --no-color --oneline $1/$2..HEAD | grep \"(fixup|squash)\\!\" )\" ]; then exit 0; else exit 1; fi; }; f"

        # Vérifie si la branche courante est bien pushée sur la tracking branch. (sortie 0 = pushed, 1 = not pushed).
        # Attention, cet alias ne fetch pas.
        # Usage : git p-is-pushed
        p-is-pushed = !"f() { if [ \"$(git show-ref -s `git rev-parse --abbrev-ref --symbolic-full-name @{u}`)\" = \"$(git show-ref -s --head --heads HEAD)\" ]; then exit 0; else exit 1; fi; }; f"

        # Vérifie que la branche locale courante est bien rebased sur la branche passée en paramètre
        # et que cette branche a bien été poussée sur sa tracking branch.
        # Usage : git can-i-merge-in <remote> <branch>
        can-i-merge-in = !"f() { \
            if git fetch $1; \
                then echo; \
                else echo \"\\033[91m✗\\033[0m Error while fetching \\033[1m$1\\033[0m\"; exit; \
            fi; \
            if git p-is-fixup-free $@; \
                then echo \"\\033[92m✓\\033[0m No fixup commit\"; \
                else echo \"\\033[91m✗\\033[0m Remaining fixup! or squash! commits\"; exit; \
            fi; \
            if git p-is-rebased $@; \
                then echo \"\\033[92m✓\\033[0m Rebased on \\033[1m$1/$2\\033[0m\"; \
                else echo \"\\033[91m✗\\033[0m Not rebased on \\033[1m$1/$2\\033[0m\"; exit; \
            fi; \
            if git p-is-pushed; \
                then echo \"\\033[92m✓\\033[0m Pushed on \\033[1m$(git rev-parse --abbrev-ref --symbolic-full-name @{u})\\033[0m\"; \
                else echo \"\\033[91m✗\\033[0m Not pushed on \\033[1m$(git rev-parse --abbrev-ref --symbolic-full-name @{u})\\033[0m\"; exit; \
            fi; \
            echo \"\\033[92m✓\\033[0m You can merge! :)\"; \
        }; f"

        d = diff
        dc = diff --cached
        ds = diff --stat
        dss = diff --shortstat
        # Diff with upstream branch.
        du = diff @{u}
        dsu = diff --stat @{u}
        dni = diff --no-index
        # Diff Tracking (diff from tracking branch).
        dt = !git diff --color $(git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD))
        dts = !git diff --stat --color $(git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD))
        # unmerged paths
        u = diff --name-only --diff-filter=U
        # Show diff between base and ours for the piped files.
        diff-base-ours = !xargs -I @ git --no-pager diff -w --color :1:@ :2:@ | less -R
        # Show diff between base and their for the piped files.
        diff-base-theirs = !xargs -I @ git --no-pager diff -w --color :1:@ :3:@ | less -R
        # Show diff between base and ours for the given file or all untracked file.
        ours = !"f() { [ $@ ] && echo -n $@ | git diff-base-ours || git u | git diff-base-ours; }; f"
        # Show diff between base and theirs for the given file or all untracked file.
        theirs = !"f() { [ $@ ] && echo -n $@ | git diff-base-theirs || git u | git diff-base-theirs; }; f"

        f = fetch

        # Permet de retrouver un commit perdu en parcourant tous les dangling commits avec gitk
        fuck = !gitk --all $( git fsck --no-reflog | awk '/dangling commit/ {print $3}' )

        # First Commit : hash de la base de l'arbre git
        empty-tree = !echo "4b825dc642cb6eb9a060e54bf8d69288fbee4904"

        g = !git-cola &

        # gitk qui affiche les branches locales et les tags, seulement
        k = !gitk --argscmd='git for-each-ref --format=\"%(refname)\" refs/heads refs/tags'
        # Affiche aussi les remote branches
        ka = !gitk --all
        # Highlight un commit
        # Usage : git ksc ref
        ksc = !"f() { git k --select-commit="$@"; }; f"
        kasc = !"f() { git ka --select-commit="$@"; }; f"
        # Affiche les commits du jour pour marchal.dorian
        kt = !"f() { git ka --since=\"$(date --date yesterday +'%Y-%m-%d 00:00:00')\" --author='marchal.dorian'; }; f"

        # no fast forward
        m = merge --no-ff
        mff = merge
        mc = merge --continue
        ma = merge --abort

        mt = !"f() { LANG=en_US.UTF-8 git mergetool -y $@; }; f"

        # Formats particuliers pour git log
        ll = log --all --graph --abbrev=8 --pretty=tformat:'%C(yellow)%h%Creset -%C(green bold)%d%Creset %s %C(white dim)(%cr) %C(blue bold)<%an>%Creset' --abbrev-commit
        # Permet de rechercher avec grep dans les logs
        # Usage : git lg pattern
        lg = !"f() { git lnp | grep --color -i \"$@\"; }; f"
        # Log Head : Affiche les x premières lignes de log (6 par défaut).
        l = !"f() { if [ -z \"$1\" ]; then linecount=\"18\"; else linecount=$1; fi; git --no-pager log --abbrev=8 --pretty=tformat:'%C(yellow)%h%Creset -%C(green bold)%d%Creset %s %C(white dim)(%cr) %C(blue bold)<%an>%Creset' --abbrev-commit HEAD~$linecount...HEAD; }; f"

        lu = log -u
        # Affichage du dernier commit
        l1 = log --pretty=tformat:'%C(yellow)%h%Creset - %s %C(white dim)(%cr) %C(blue bold)<%an>%Creset' --abbrev-commit -1

        # Numbered list of latest commits.
        lh = !"f() { git log --oneline | head -n ${1:-30} | nl -v0; }; f"

        # `git lh` followed by `git p-cfh`
        lhf = !"f() { git lh $1 && echo '\nEnter index of commit to fixup: ' && read commit_hash && git p-cfh $commit_hash; }; f"

        # `git lh` followed by `git p-crh`
        lhr = !"f() { git lh $1 && echo '\nEnter index of commit to reword: ' && read commit_hash && git p-crh $commit_hash; }; f"

        # `git lh` followed by `git p-rbh`.
        lhrb = !"f() { git lh $1 && echo '\nEnter index of commit to rebase on: ' && read commit_hash && git p-rbh $commit_hash; }; f"

        # `git lh` followed by `git p-rbhas`.
        lhrbas = !"f() { git lh $1 && echo '\nEnter index of commit to rebase on: ' && read commit_hash && git p-rbhas $commit_hash; }; f"

        p = push
        pf = push --force
        pt = push --tags
        pu = push --set-upstream
        # Pousse la branche courante en settant l'uptream à origin/<current-branch-name>
        puo = !"f() { git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD); }; f"

        pl = pull --ff-only

        revert-chmod = !"git diff -p -R | grep -E \"^(diff|(old|new) mode)\" | git apply"

        # --keep-empty allows keeping reword commits (see `reword` alias).
        rb = rebase --keep-empty --rebase-merges -m
        rba = rebase --abort
        rbc = rebase --continue
        rbs = rebase --skip
        rbi = rebase -i --rebase-merges --keep-empty
        rbas = rebase -i --autosquash --rebase-merges --keep-empty
        # Rebase interactif en changeant l'author date de tous les commits.
        # Utile pour réordonner les commits dans l'interface de PR Github.
        # /!\ Peut fausser les stats de commit.
        rbo = rebase -i --keep-empty --rebase-merges -x 'git commit --amend -C HEAD --date=\"$(date -R)\"'
        # Output the hash before rebase.
        before-rebase = !"git reflog | grep -A 1 'rebase (start)' | head -n 2 | tail -n 1 | cut -d' ' -f1"

        # Creates an empty "squash!" commit with an editable commit message
        # defaulting to the message of the given ref.
        # This allows rewording a commit without rewriting history (useful during code review).
        # Note: rebases should be done with the --keep-empty flag to keep these commits.
        reword = !"f() { git commit --allow-empty -m \"$(git log --format='squash! %s%n%n%B' -n 1 $1)\" && (git commit --allow-empty --amend); }; f"
        # reword = !"f() { git commit --allow-empty -m \"squash! $(git log --format=%B -n 1 $1)\" && (git commit --allow-empty --amend || git reset --hard HEAD^); }; f"

        r = reset
        rs = reset --soft
        rh = reset --hard


        s = status --untracked-files=all
        ss = status --untracked-files=all -s

        sh = show --stat

        st  = stash
        stl = stash list
        sta = stash apply
        std = stash drop
        sts = stash show -p
        stp = stash pop

        sub = submodule
        subi = submodule init
        subu = submodule update

        t = tag
        td = tag -d

        # Unstage all files.
        una = !echo  '/!\\\\ NOTHING DONE. Use git reset HEAD -- to undo a commit.'
        # Undo a commit.
        unc = !echo  '/!\\\\ NOTHING DONE. Use git reset --soft HEAD^ to undo a commit.'
        # Undo a commit and unstage all files.
        unca = !echo  '/!\\\\ NOTHING DONE. Use git reset HEAD^ -- to undo a commit.'

        # Liste numérotée des fichiers en conflit.
        uh = !"f() { git status --porcelain | grep 'U.\\|.U\\|DD|AA' | sed 's/^\\w\\+ \\+//g' | head -n ${1:-30} | nl -v0; }; f"
        # Permet d'xclip un des fichiers listés avec `git uh`.
        # Usage : git p-clipuh 2
        p-clipuh = !"f() { git uh $(($1+1)) | grep -oP --color=NEVER \"^\\s*$1\\s+\\K([^\\s]+)\" | xargs echo -n | xclip -selection clipboard; }; f"
        # `git uh` suivi d'un `git p-clipuh`.
        uhc = !"f() { git uh $1 && echo '\nEnter index of file to xclip: ' && read file_index && git p-clipuh $file_index; }; f"

        # Nombre de commits par contributeur
        who = shortlog -sne



        # ----- hub specific aliases -----

        pr = !hub pr show --format '%pC%>(8)%i%Creset  %t%  l%n-> %U%n'
        hp = !hub pull-request -o
        hpd = !hub pull-request --draft -o
